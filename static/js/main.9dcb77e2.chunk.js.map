{"version":3,"sources":["Components/ToolBar.js","Components/FullCalendarDemo.js","Components/SideBar.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["ToolBarcustom","react_default","a","createElement","toolbar","className","primereact_button","icon","onClick","this","props","onButtonClick","React","Component","FullCalendarDemo","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","events","options","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","defaultView","defaultDate","header","left","center","right","editable","style","padding","fullcalendar","SideBar","sidebar","visible","visibleLeft","baseZIndex","onHide","hide","fontWeight","type","label","marginRight","Main","bind","assertThisInitialized","setState","ToolBar","Components_SideBar","Components_FullCalendarDemo","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAgBeA,0LATX,OACEC,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAACG,EAAA,OAAD,CAAQC,KAAK,aAAaC,QAASC,KAAKC,MAAMC,yBAL5BC,IAAMC,2CCoDnBC,iCA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,QACKY,MAAQ,CACXC,OAAQ,GACRC,QAAS,CACPC,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,YAAa,eACbC,YAAa,aACbC,OAAQ,CACNC,KAAM,YACNC,OAAQ,QACRC,MAAO,yCAETC,UAAU,IAbFnB,wEA2BZ,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,4BAIJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCAAiC8B,MAXxC,CACVC,QAAS,SAWLnC,EAAAC,EAAAC,cAACkC,EAAA,aAAD,CACEf,OAAQb,KAAKY,MAAMC,OACnBC,QAASd,KAAKY,MAAME,mBAvCDV,sBCsBhByB,mLA3BX,OACErC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAACoC,EAAA,QAAD,CACEC,QAAS/B,KAAKC,MAAM+B,YACpBC,WAAY,IACZC,OAAQlC,KAAKC,MAAMkC,MAEnB3C,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAAEU,WAAY,WAAzB,gBACA5C,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACEwC,KAAK,SACLtC,QAASC,KAAKC,MAAMkC,KACpBG,MAAM,OACN1C,UAAU,mBACV8B,MAAO,CAAEa,YAAa,WAExB/C,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACEwC,KAAK,SACLtC,QAASC,KAAKC,MAAMkC,KACpBG,MAAM,SACN1C,UAAU,wBAEH,YAvBGQ,aC6BPoC,cA3Bb,SAAAA,IAAc,IAAAlC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAwC,IACZlC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAAX,QACKY,MAAQ,GAEbN,EAAKM,MAAQ,CACXoB,aAAa,GAEf1B,EAAKJ,cAAgBI,EAAKJ,cAAcuC,KAAnBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAPTA,+EAUZN,KAAK2C,SAAS,CACZX,aAAchC,KAAKY,MAAMoB,+CAI3B,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,CACE1C,cAAeF,KAAKE,gBAEtBV,EAAAC,EAAAC,cAACmD,EAAD,CAASb,YAAahC,KAAKY,MAAMoB,YAAaG,KAAQnC,KAAKE,gBAC3DV,EAAAC,EAAAC,cAACoD,EAAD,cAtBW1C,qCCUJ2C,MARf,WACE,OACEvD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACsD,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9dcb77e2.chunk.js","sourcesContent":["import { Toolbar } from \"primereact/toolbar\";\r\nimport { Button } from \"primereact/button\";\r\nimport React from \"react\";\r\nimport \"../Layouts/Main.scss\";\r\n\r\nclass ToolBarcustom extends React.Component {\r\n  render() {\r\n    return (\r\n      <Toolbar>\r\n        <div className=\"topToolBar p-toolbar\">\r\n          <Button icon=\"pi pi-bars\" onClick={this.props.onButtonClick} />\r\n        </div>\r\n      </Toolbar>\r\n    );\r\n  }\r\n}\r\nexport default ToolBarcustom;\r\n","import React, { Component } from \"react\";\r\nimport { FullCalendar } from \"primereact/fullcalendar\";\r\n//import {EventService} from '../service/EventService';\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"@fullcalendar/core/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\nimport \"@fullcalendar/timegrid/main.css\";\r\n\r\nclass FullCalendarDemo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      events: [],\r\n      options: {\r\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n        defaultView: \"dayGridMonth\",\r\n        defaultDate: \"2017-02-01\",\r\n        header: {\r\n          left: \"prev,next\",\r\n          center: \"title\",\r\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\"\r\n        },\r\n        editable: true\r\n      }\r\n    };\r\n    // this.eventService = new EventService();\r\n  }\r\n\r\n  /*  componentDidMount() {\r\n        this.eventService.getEvents().then(data => this.setState({events: data}));\r\n    } */\r\n\r\n  render() {\r\n    let style = {\r\n      padding: \"20px\"\r\n    };\r\n    return (\r\n      <div>\r\n        <div className=\"content-section introduction\">\r\n          <div className=\"feature-intro\">\r\n            <h1>FullCalendar</h1>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"content-section implementation\" style={style}>\r\n          <FullCalendar\r\n            events={this.state.events}\r\n            options={this.state.options}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FullCalendarDemo;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Sidebar } from \"primereact/sidebar\";\r\nclass SideBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"content-section implementation\">\r\n        <Sidebar\r\n          visible={this.props.visibleLeft}\r\n          baseZIndex={1000000}\r\n          onHide={this.props.hide}\r\n        >\r\n          <h1 style={{ fontWeight: \"normal\" }}>Left Sidebar</h1>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={this.props.hide}\r\n            label=\"Save\"\r\n            className=\"p-button-success\"\r\n            style={{ marginRight: \".25em\" }}\r\n          />\r\n          <Button\r\n            type=\"button\"\r\n            onClick={this.props.hide}\r\n            label=\"Cancel\"\r\n            className=\"p-button-secondary\"\r\n          />\r\n        </Sidebar>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Component } from \"react\";\r\nimport ToolBarcustom from \"./Components/ToolBar\";\r\nimport FullCalendarDemo from \"./Components/FullCalendarDemo\";\r\nimport SideBar from \"./Components/SideBar\";\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n\r\n    this.state = {\r\n      visibleLeft: false\r\n    };\r\n    this.onButtonClick = this.onButtonClick.bind(this);\r\n  }\r\n  onButtonClick() {\r\n    this.setState({\r\n      visibleLeft: !this.state.visibleLeft\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ToolBarcustom\r\n          onButtonClick={this.onButtonClick}\r\n        />\r\n        <SideBar visibleLeft={this.state.visibleLeft} hide = {this.onButtonClick}/>\r\n        <FullCalendarDemo />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"./Main\";\r\nimport \"./App.scss\";\r\nimport \"primereact/resources/themes/nova-light/theme.css\";\r\nimport \"primereact/resources/primereact.min.css\";\r\nimport \"primeicons/primeicons.css\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}